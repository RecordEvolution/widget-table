/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Title = string;
export type Subtitle = string;
export type HeaderFontSize = string;
export type RowHeight = string;
/**
 * You can describe the border in this way: ''1px solid red''
 */
export type RowBorder = string;
export type HeaderLabel = string;
export type DataType = "state" | "string" | "number" | "boolean" | "button" | "image";
export type DisplayValue = string;
export type LinkURL = string;
export type Values = {
  value?: DisplayValue;
  link?: LinkURL;
  [k: string]: unknown;
}[];
/**
 * Number of digits after the decimal point.
 */
export type NumberPrecision = number;
/**
 * Applicable for datatype 'state' fields only. Describe the State Map as an alternating list like this: "'ONLINE': 'green', 'DISCONNECTED', 'red'"
 */
export type StateMap = string;
export type ColumnWidth = number;
export type FontSize = string;
/**
 * eg. 800 for bold and 100 for light font.
 */
export type FontWeight = string;
/**
 * You can describe the border in this way: '1px solid red'
 */
export type CellBorder = string;
/**
 * Add columns and define how they should be displayed.
 */
export type ColumnDefinitions = {
  header?: HeaderLabel;
  type?: DataType;
  values?: Values;
  styling?: Styling;
  [k: string]: unknown;
}[];

export interface InputData {
  title?: Title;
  subTitle?: Subtitle;
  styling?: TableStyling;
  columns?: ColumnDefinitions;
  [k: string]: unknown;
}
export interface TableStyling {
  headerFontSize?: HeaderFontSize;
  headerBackground?: HeaderBackgroundColor;
  rowHeight?: RowHeight;
  rowBorder?: RowBorder;
  [k: string]: unknown;
}
export interface HeaderBackgroundColor {
  [k: string]: unknown;
}
export interface Styling {
  precision?: NumberPrecision;
  stateMap?: StateMap;
  width?: ColumnWidth;
  fontSize?: FontSize;
  fontWeight?: FontWeight;
  color?: FontColor;
  border?: CellBorder;
  [k: string]: unknown;
}
export interface FontColor {
  [k: string]: unknown;
}
